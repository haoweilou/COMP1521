// BigNum.c ... LARGE positive integer values

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "BigNum.h"

// Initialise a BigNum to N bytes, all zero
void initBigNum (BigNum *bn, int Nbytes)
{
	bn->bytes = malloc((Nbytes+1)*sizeof(char));
	assert(bn->bytes != NULL);
    for (bn->nbytes = 0; bn->nbytes <= Nbytes; bn->nbytes++)
        bn->bytes[bn->nbytes] = 0;
}

// Add two BigNums and store result in a third BigNum
void addBigNums (BigNum bnA, BigNum bnB, BigNum *res)
{
    res->nbytes = (bnA.nbytes >= bnB.nbytes)?bnA.nbytes:bnB.nbytes;
    Byte *temp = res->bytes;
    res->bytes = malloc((res->nbytes+1)*sizeof(char));
    free(temp);
    for(int i = 0; i < res->nbytes ; i++) {
        int A = (i>=bnA.nbytes)?0:bnA.bytes[i]-'0';
        int B = (i>=bnB.nbytes)?0:bnB.bytes[i]-'0';
        res->bytes[i] = res->bytes[i] + A + B;
        res->nbytes = (i+1 == res->nbytes && res->bytes[i] > 9)? res->nbytes+1 : res->nbytes;
        res->bytes[i+1] = res->bytes[i]/10;
        res->bytes[i] = res->bytes[i]%10; 
        res->bytes[i] += '0';
    }
	return;
}

// Set the value of a BigNum from a string of digits
// Returns 1 if it *was* a string of digits, 0 otherwise
int scanBigNum (char *s, BigNum *bn)
{
	bn->nbytes = 0;
	int start = -1, end = -1;
	for(int i = 0; s[i] != '\0' ; i++ ) {
        start = (isdigit(s[i]) != 0 && start == -1) ? i : start;
        end = (isdigit(s[i]) != 0 && start == -1) ? i : end;
	    if(isdigit(s[i]) == 0 && start != -1){
            break;
        } 
        end = (start != -1)?i:end;
	}
	bn->nbytes = end - start + 1;
	if(end == -1) {
	    return 0;
	}
	if(bn->nbytes > 20) {
	    Byte *temp = bn->bytes;
	    bn->bytes = malloc((bn->nbytes+1)*sizeof(char));
	    free(temp);
	}
	for(int i = end, j = 0; i >= start ; i--) {
	    bn->bytes[j] = (isdigit(s[i]) != 0)?s[i]:bn->bytes[j];
	    j = (bn->bytes[j] != 0)?j++:j;
	}
	return 1;
}

// Display a BigNum in decimal format
void showBigNum (BigNum bn)
{
	int start = 0;
	for(int i = bn.nbytes; i >= 0 && start == 0; i--)
        start = (bn.bytes[i] > '0' && bn.bytes[i] <= '9')?i:start;
	for(int i = start; i >= 0 ; i--)
	    printf("%c",bn.bytes[i]);
	return;
}
